pluginName: EC-Bamboo
description: CloudBees Flow Plugin for Atlassian Bamboo
version: 1.5.0
author: CloudBees
authorUrl: http://www.electric-cloud.com/support
supportLevel: 10
metafile: { ecSupportLevel: 10 }
category: Build

configuration:
  shell: ec-perl
  parameters:
    - name: config
      label: Configuration Name
      documentation: Configuration name.
      type: entry
      required: true
    - name: desc
      label: Description
      documentation: Description for the configuration
      type: entry
      required: false
    - name: endpoint
      label: Bamboo Server URL
      documentation: Atlassian Bamboo server URL.
      type: entry
      required: true
    - name: basic_credential
      documentation: Provide the credentials ElectricFlow uses to communicate with the Bamboo server.
      label: Credential
      type: credential
      userNameLabel: Username
      required: true
      passwordLabel: Password
    - name: debugLevel
      label: Debug Level
      documentation: Level of the plugin procedure's verbosity.
      type: select
      required: 0
      value: 0
      options:
        - name: Info
          value: 0
        - name: Debug
          value: 1
        - name: Trace
          value: 2
    - name: httpProxyUrl
      label: HTTP Proxy
      documentation: An HTTP proxy that will be used for the connections.
      type: entry
      required: false
    - name: proxy_credential
      label: Proxy Authorization
      documentation: Provide the credentials ElectricFlow uses to authenticate proxy requests.
      type: credential
      userNameLabel: Proxy Username
      passwordLabel: Proxy Password
      required: false

procedures:
  - name: GetAllPlans
    description: Returns all plans that are available for current user.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: projectKey
        label: Project Key
        documentation: Project key (short name) of project to filter plans.
        type: entry
        required: false
      - name: resultFormat
        label: Result Format
        documentation: Format to save the results.
        type: select
        required: false
        options:
          - name: 'JSON'
            value: 'json'
          - name: 'Property Sheet'
            value: 'propertySheet'
          - name: 'Do not save the result'
            value: 'none'
        value: json
      - name: resultPropertySheet
        label: Result Property Sheet
        documentation: Property sheet to store the results. Each plan will be saved under a separate property (property sheet). Additionally, the planKeys property will contain comma-separated plan keys.
        type: entry
        required: false
        value: /myJob/plans
        dependsOn: resultFormat
        condition: ${resultFormat} != 'none'
    outputParameters: {planKeys: 'List of comma-separated plan keys'}

  - name: GetPlanDetails
    description: This procedure prints Bamboo build plan details.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: projectKey
        label: Project Key
        documentation: Project key (short name) of project that contains build plan.
        type: entry
        required: true
      - name: planKey
        label: Plan Key
        documentation: Short name of plan to get details.
        type: entry
        required: true
      - name: resultFormat
        label: Result Format
        documentation: Format to save the results.
        type: select
        required: false
        value: json
        options:
          - name: 'JSON'
            value: 'json'
          - name: 'Property Sheet'
            value: 'propertySheet'
      - name: resultPropertySheet
        label: Result Property Sheet
        documentation: Property sheet to store the results.
        type: entry
        required: false
        value: /myJob/plan

  - name: GetPlanRuns
    description: This procedure returns information about runs on Bamboo build plan.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: projectKey
        label: Project Key
        documentation: Project key (short name) of project that contains build plan.
        type: entry
        required: true
      - name: planKey
        label: Plan Key
        documentation: Short name of plan to get details.
        type: entry
        required: true
      - name : maxResults
        label: Max Results
        documentation: Limit the count of retrieved plan results by this value. Set to '0' to retrieve all results.
        value: 25
        type: entry
      - name: buildState
        label: Build State Filter
        documentation: Get only plan runs with this state
        type: select
        options: [{ name: 'All', value: 'All' }, { name: 'Successful', value: 'Successful' }, { name: 'Failed', value: 'Failed' }, { name: 'Unknown', value: 'Unknown' }]
        value: All
        required: false
      - name: resultFormat
        label: Result Format
        documentation: Format to save the results.
        type: select
        required: false
        value: json
        options:
          - name: 'JSON'
            value: 'json'
          - name: 'Property Sheet'
            value: 'propertySheet'
          - name: 'Do not save the result'
            value: 'none'
      - name: resultPropertySheet
        label: Result Property Sheet
        documentation: Property sheet to store the results. Each plan run will be saved under a separate property (property sheet). Additionally, the planKeys property will contain comma-separated plan keys.
        value: /myJob/resultKeys
        type: entry
        required: false
        dependsOn: resultFormat
        condition: ${resultFormat} != 'none'
    outputParameters: {
      resultKeys: "List of comma-separated plan build result keys.",
      latestResultKey: 'Key for the latest build run.'
    }

  - name: RunPlan
    description: This procedure runs Bamboo build plan.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: projectKey
        label: Project Key
        documentation: Project key (short name) of project that contains build plan.
        type: entry
        required: true
      - name: planKey
        label: Plan Key
        documentation: Short key of plan to run.
        type: entry
        required: true
      - name: customRevision
        label: Custom Revision
        type: entry
        documentation: Run build against a custom branch (revision).
        required: false
      - name: additionalBuildVariables
        label: Additional Variables
        htmlDocumentation: |
          Override global and/or plan variables for this Run. New values should be specified as name-value pairs, with 1 pair per line.<br/>Example: <br/>
            <b>system.debug=true</b> <br/>
            <b>BuildConfiguration=debug</b> <br/>
            <b>BuildPlatform=x64</b> <br/>
        documentation: |
          Override global and/or plan variables for this Run. New values should be specified as name-value pairs, with 1 pair per line.<br/>Example: <br/>
            <b>system.debug=true</b>
            <b>BuildConfiguration=debug</b>
            <b>BuildPlatform=x64</b>
        type: textarea
        required: false
        collection: 1
        collectionName: Parameter name
        collectionValue: Parameter value
        # This is a workaround for CEV-21967
        collectionEntrySeparator: ;#;#;#
        collectionValueSeparator: =
      - name: waitForBuild
        label: Wait For Build
        documentation: If checked, the procedure will wait until the build is finished or until the wait time exceeds the value specified in the Wait Timeout, whichever is earlier.
        type: checkbox
        initiallyChecked: true
        checkedValue: 1
        uncheckedValue: 0
        required: true
      - name: waitTimeout
        label: Wait Timeout
        documentation: Timeout in seconds to wait for build to finish. Will be used if "Wait for build" is checked. Default waiting time is 300 secs.
        type: entry
        value: 300
        required: false
        dependsOn: waitForBuild
        condition: ${waitForBuild} == '1'
      - name: resultFormat
        label: Result Format
        documentation: Format to save the results.
        type: select
        required: false
        value: json
        options:
          - name: 'JSON'
            value: 'json'
          - name: 'Property Sheet'
            value: 'propertySheet'
          - name: 'Do not save the result'
            value: 'none'
      - name: resultPropertySheet
        label: Result Property Sheet
        documentation: Property sheet to store the results.
        value: /myJob/runResult
        type: entry
        required: false
        dependsOn: resultFormat
        condition: ${resultFormat} != 'none'
    outputParameters: {
      buildResultKey: 'Composite key for the Run Result.',
      buildUrl: 'Link to the result page.'
    }

  - name: EnablePlan
    description: This procedure enables build plan.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: projectKey
        label: Project Key
        documentation: Project key (short name) of project that contains build plan.
        type: entry
        required: true
      - name: planKey
        label: Plan Key
        documentation: Short name of plan.
        type: entry
        required: true

  - name: DisablePlan
    description: This procedure disables build plan.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: projectKey
        label: Project Key
        documentation: Project key (short name) of project that contains build plan.
        type: entry
        required: true
      - name: planKey
        label: Plan Key
        documentation: Short name of plan.
        type: entry
        required: true

  - name: TriggerDeployment
    description: This procedure runs Bamboo deployment plan.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: deploymentProjectName
        label: Deployment Project Name
        documentation: Name of the deployment project.
        type: entry
        required: true
      - name: deploymentEnvironmentName
        label: Environment Name
        documentation: Name of the environment for the deployment.
        type: entry
        required: true
      - name: deploymentVersionName
        label: Version Name
        documentation: Name of the version to be deployed.
        type: entry
        required: true
      - name: waitForDeployment
        label: Wait For Deployment
        documentation: If checked, the procedure will wait until the deployment is finished or until the wait time exceeds the value specified in the Wait Timeout, whichever is earlier.
        type: checkbox
        initiallyChecked: true
        checkedValue: 1
        uncheckedValue: 0
        required: false
      - name: waitTimeout
        label: Wait Timeout
        documentation: Timeout in seconds to wait for deployment to finish. Will be used if "Wait for build" is checked. Default waiting time is 300 secs.
        type: entry
        value: 300
        required: false
        dependsOn: waitForDeployment
        condition: ${waitForDeployment} == '1'
      - name: resultFormat
        label: Result Format
        documentation: Format to save the results.
        type: select
        required: false
        value: json
        options:
          - name: 'JSON'
            value: 'json'
          - name: 'Property Sheet'
            value: 'propertySheet'
          - name: 'Do not save the result'
            value: 'none'
      - name: resultPropertySheet
        label: Result Property Sheet
        documentation: Property sheet to store the results.
        value: /myJob/deploymentResult
        type: entry
        required: false
        dependsOn: resultFormat
        condition: ${resultFormat} != 'none'
    outputParameters: {
      deploymentResultKey: 'Key of the deployment result.',
      deploymentResultUrl: 'URL to the deployment result report.'
    }

  - name: GetDeploymentProjectsForPlan
    description: This procedure returns information about deployment projects linked to this build plan.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: projectKey
        label: Project Key
        documentation: Project key (short name) of project that contains build plan.
        type: entry
        required: true
      - name: planKey
        label: Plan Key
        documentation: Short name of plan.
        type: entry
        required: true
      - name: resultFormat
        label: Result Format
        documentation: Format to save the results.
        type: select
        required: false
        value: json
        options:
          - name: 'JSON'
            value: 'json'
          - name: 'Property Sheet'
            value: 'propertySheet'
          - name: 'Do not save the result'
            value: 'none'
      - name: resultPropertySheet
        label: Result Property Sheet
        documentation: Property sheet to store the results.
        value: /myJob/deploymentProjectKeys
        type: entry
        required: false
        dependsOn: resultFormat
        condition: ${resultFormat} != 'none'
    outputParameters: {
      deploymentProjectKeys: 'List of comma-separated deployment project keys for the plan',
    }

  - name: CreateRelease
    description: This procedure creates new release (version) from the build plan result.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: deploymentProjectName
        label: Deployment Project Name
        documentation: Name of the deployment project where version will be created.
        type: entry
        required: true
      - name: planBuildKey
        label: Plan Build Key
        documentation: Identifier of the Plan Build result. e.g. 'PROJECT-PLAN-22'
        type: entry
        required: true
      - name: requestVersionName
        label: Request Version Name?
        documentation: Request name for the next version from the deployment project.
        type: checkbox
        initiallyChecked: false
        checkedValue: 1
        uncheckedValue: 0
        required: false
      - name: versionName
        label: Version Name
        documentation: Name for new version to create. e.g. 'release-22'.
        type: entry
        required: false
        dependsOn: requestVersionName
        condition: ${requestVersionName} == 0
      - name: resultFormat
        label: Result Format
        documentation: Format to save the results.
        type: select
        required: false
        value: json
        options:
          - name: 'JSON'
            value: 'json'
          - name: 'Property Sheet'
            value: 'propertySheet'
          - name: 'Do not save the result'
            value: 'none'
      - name: resultPropertySheet
        label: Result Property Sheet
        documentation: Result property sheet to save created version properties.
        value: /myJob/version
        type: entry
        required: false
        dependsOn: resultFormat
        condition: ${resultFormat} != 'none'
    outputParameters: {
      version: 'Name of the created version.'
    }
  - name: CollectReportingData
    description: This procedure collects reporting data for the DevOpsInsight Dashboards. It collects build results with optional tests run details.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: projectKey
        label: Project Key
        documentation: Project key (short name) of project that contains build plan.
        type: entry
        required: true
      - name: planKey
        label: Plan Key
        documentation: Short name of plan to get details. Might be simply planKey or composite planKey-jobKey.
        type: entry
        required: false
      - name: retrieveTestResults
        label: Retrieve Test Results?
        documentation: If checked - test data will be also collected.
        type: checkbox
        initiallyChecked: false
        checkedValue: 1
        uncheckedValue: 0
        required: false
      - name: testCategory
        label: Test Category
        documentation: |
          The category for tests of the collected build runs. Example: 'unit-test' or 'system-test'.
        type: entry
        required: false
        value: unit-test
        dependsOn: retrieveTestResults
        condition: ${retrieveTestResults} == '1'
      - name: transformScript
        label: Transformation script
        type: textarea
        documentation: Perl code to transform report payload.
        htmlDocumentation: |
          Allows user to provide perl script for payload customization.
          This method will be invoked by plugin with 2 parameters. 1st parameter is context object, 2nd is payload object.
          Method should be named "transform", and should return payload object. In this example myTimestamp field will be added to payload object:
          <pre>
            sub transform {
                my ($context, $payload) = @_;
                $payload->{myTimestamp} = $context->one();
                return $payload;
            }
            sub one {
                my ($context) = @_;
                return time();
            }
          </pre>
      - name: initialRetrievalCount
        label: Initial Count
        documentation: Count of old builds to retrieve from server on the first run. If omited it will be set to 10.
        type: entry
        value: 10
        required: false
      - name: metadataPropertyPath
        label: Metadata Property Path
        documentation: Property sheet where run metadata will be stored. If omitted, /mySchedule/EC-Bamboo-%JobName%-build will be used for schedule context. For all other contexts root is /myProject.
        type: entry
        required: false
      - name: baseDrilldownUrl
        label: Base URL for drill-down
        documentation: Base URL for the Bamboo. If empty it will be set to %url_from_configuration%/job/%Job name%.
        type: entry
        required: false
      - name: previewMode
        label: Preview
        documentation: If checked, no data will be sent to the reporting system. Use this option to preview gathered data.
        type: checkbox
        initiallyChecked: false
        checkedValue: 1
        uncheckedValue: 0
        required: false
      - name: debugLevel
        label: Debug
        documentation: If checked, the log level will be set to "Debug" for the job.
        type: checkbox
        initiallyChecked: false
        checkedValue: 1
        uncheckedValue: 0
        required: false
      - name: releaseName
        label: Release Name
        documentation: Name of the CloudBees Flow release collected data relates to.
        required: false
        type: entry
      - name: releaseProjectName
        label: Release Project Name
        documentation: Name of the CloudBees Flow release project collected data relates to.
        required: false
        type: entry
  - name: ValidateCRDParams
    description: Service procedure to check parameter values passed for DOISDataSource creation.
    hasConfig: true
    shell: ec-perl
    parameters:
      - name: projectKey
        label: Project Key
        documentation: Project key (short name) of project that contains build plan.
        type: entry
        required: true
      - name: planKey
        label: Plan Key
        documentation: Short name of plan to get details. Might be simply planKey or composite planKey-jobKey.
        type: entry
        required: false
      - name: frequency
        label: Polling Frequency
        documentation: Polling frequency (in minutes) for retrieving defects from JIRA.
        type: entry
        value: 30
