/**
 * Expected input arguments to the script:
 * releaseName: Name of the ElectricFlow release
 * projectName: The name of the ElectricFlow project that the release belongs to.
 * reportObjectTypeName: The name of the report object type, e.g, 'feature', 'build'.
 * scheduleName: The name of the schedule and procedure if the plugin needs to create them.
 * scheduleProjectName: The name of the project that the schedule belongs to.
 * pluginParameters: Map of parameter name-value pairs for the plugin parameters defined in the form XML.
 */


import com.electriccloud.domain.DevOpsInsightDataSourceResult
import com.electriccloud.errors.EcException
import com.electriccloud.errors.ErrorCodes

import com.electriccloud.bamboo.CollectReportingDataValidation

def PLUGIN_NAME = 'EC-Bamboo'
def CONFIG_LOCATION = 'ec_plugin_cfgs'
def REQUIRED_PARAMETERS = ['config', 'projectKey']
def SUPPORTED_PAYLOAD_TYPES = ['build']

String getSourceDetails(Map pluginParameters) {
    def sourceIdentifier = pluginParameters.projectKey

    if (pluginParameters.planKey) {
        sourceIdentifier += '-' + pluginParameters.planKey
    }

    return sourceIdentifier
}

void validatePluginParams(Map pluginParameters) {
    if (pluginParameters == null) {
        throw EcException
                .code(ErrorCodes.InvalidParameterValue)
                .message("pluginParameters are required for dsl script")
                .build();
    }

    checkRequiredParameters(pluginParameters)

    // Specific checks can be placed below this line
    String frequency = pluginParameters.frequency

    if (!((frequency ?: "").isInteger()) || Integer.parseInt(frequency) <= 0) {
        throw EcException.code(ErrorCodes.InvalidArgument)
                .message("'Polling Frequency' must be a positive integer.")
                .build();
    }

}

def getCreateActualParameters(Map pluginParameters) {
    return [
            config              : pluginParameters.config,
            projectKey          : pluginParameters.projectKey,
            planKey             : pluginParameters.planKey,
            initialRecordsCount : pluginParameters.initialRecordsCount,
            retrieveTestResults : pluginParameters.retrieveTestResults,
            testCategory        : pluginParameters.testCategory,
            transformScript     : pluginParameters.transformScript,
            metadataPropertyPath: pluginParameters.metadataPropertyPath,
            baseDrilldownUrl    : pluginParameters.baseDrilldownUrl,
            previewMode         : '0',
            debugLevel          : '0',
    ]
}


def getModifyActualParameters(Map pluginParameters) {
    return [
            config             : pluginParameters.config,
            projectKey         : pluginParameters.projectKey,
            planKey            : pluginParameters.planKey,
            initialRecordsCount: pluginParameters.initialRecordsCount,
            retrieveTestResults: pluginParameters.retrieveTestResults,
            testCategory       : pluginParameters.testCategory,
            transformScript    : pluginParameters.transformScript,
            baseDrilldownUrl   : pluginParameters.baseDrilldownUrl,
    ]
}

void checkPayloadType(String payloadType) {
    if (payloadType == null) {
        throw EcException
                .code(ErrorCodes.InvalidParameterValue)
                .message("payloadType is required for dsl script")
                .build();
    }

    def supportedTypes = ['build']
    if (supportedTypes.indexOf(payloadType) < 0) {
        throw EcException
                .code(ErrorCodes.InvalidParameterValue)
                .message("Payload type '$payloadType' is not supported")
                .build();
    }
}

void checkRequiredParameters(Map pluginParameters) {
    def params = ['config', 'projectKey']
    params.each { it ->
        if (pluginParameters[it] == null) {
            throw EcException
                    .code(ErrorCodes.MissingArgument)
                    .message("plugin parameter $it is required for dsl script")
                    .build();
        }
    }

}

String getConfigProperty(Map pluginParameters) {
    String configName = pluginParameters.config
    return "/plugins/EC-Bamboo/project/ec_plugin_cfgs/${configName}/endpoint"
}

if (args.releaseName == null) {
    throw EcException
            .code(ErrorCodes.MissingArgument)
            .message("releaseName is required for dsl script")
            .build();
}
if (args.projectName == null) {
    throw EcException
            .code(ErrorCodes.MissingArgument)
            .message("projectName is required for dsl script")
            .build();
}
if (args.reportObjectTypeName == null) {
    throw EcException
            .code(ErrorCodes.MissingArgument)
            .message("reportObjectTypeName is required for dsl script")
            .build();
}
if (args.scheduleName == null) {
    throw EcException
            .code(ErrorCodes.MissingArgument)
            .message("scheduleName is required for dsl script")
            .build();
}
if (args.scheduleProjectName == null) {
    throw EcException
            .code(ErrorCodes.MissingArgument)
            .message("scheduleProjectName is required for dsl script")
            .build();
}


def releaseName = args.releaseName;
def projectName = args.projectName;
def scheduleName = args.scheduleName;
def scheduleProjectName = args.scheduleProjectName;

def procedureExists(String prjct, String prcdr) {

    // Unexisting project will be handled by call
    def procedures = getProcedures(projectName: prjct)

    def proc = false
    procedures.each {
        if (it.procedureName == prcdr) {
            proc = true
        }
    }
    return proc;
}

if (!procedureExists(scheduleProjectName, scheduleName)) {
    throw EcException
            .code(ErrorCodes.ScriptError)
            .message("Procedure '${scheduleName}' does not exist in project '${scheduleProjectName}' and can not be modified")
            .build();
}

// Plugin form params
def pluginParameters = args.pluginParameters;
// After this line code will be plugin-specific.


validatePluginParams(pluginParameters)
checkPayloadType(args.reportObjectTypeName)

// Plugins metadata
def pluginName = 'EC-Bamboo'

// Extract the parameters expected through the form XML
// EC-Bamboo params:
// config
// projectKey
// planKey
// frequency

def actualParameters = getModifyActualParameters(pluginParameters)

project scheduleProjectName, {
    resourceName = null
    workspaceName = null

    procedure scheduleName, {
        description = ''
        jobNameTemplate = ''
        resourceName = ''
        timeLimit = ''
        timeLimitUnits = 'minutes'
        workspaceName = ''

        step 'collect', {
            description = ''
            alwaysRun = '0'
            broadcast = '0'
            command = null
            condition = ''
            errorHandling = 'failProcedure'
            exclusiveMode = 'none'
            logFileName = null
            parallel = '0'
            postProcessor = null
            precondition = ''
            releaseMode = 'none'
            resourceName = ''
            shell = null
            subprocedure = 'CollectReportingData'
            subproject = "/plugins/${pluginName}/project"
            timeLimit = ''
            timeLimitUnits = 'minutes'
            workingDirectory = null
            workspaceName = ''
            actualParameters.each { k, v ->
                actualParameter k, v
            }
        }
    }

    schedule scheduleName, {
        description = ''
        applicationName = null
        applicationProjectName = null
        beginDate = ''
        endDate = ''
        environmentName = null
        environmentProjectName = null
        environmentTemplateName = null
        environmentTemplateProjectName = null
        environmentTemplateTierMapName = null
        interval = pluginParameters.frequency
        intervalUnits = 'minutes'
        misfirePolicy = 'ignore'
        monthDays = ''
        pipelineName = null
        priority = 'normal'
        procedureName = scheduleName
        processName = null
        releaseName = null
        rollingDeployEnabled = null
        rollingDeployManualStepAssignees = null
        rollingDeployManualStepCondition = null
        rollingDeployPhases = null
        scheduleDisabled = '0'
        snapshotName = null
        startTime = ''
        startingStage = null
        startingStateName = null
        stopTime = ''
        timeZone = ''
        weekDays = ''
        workflowName = null
    }
}

def retval = new DevOpsInsightDataSourceResult();
def configLocation = getConfigProperty(pluginParameters)
def sourceDetails = getSourceDetails(pluginParameters)

retval.connectionInfo = getProperty(configLocation, suppressNoSuchPropertyException: true)?.value;
retval.sourceDetails = sourceDetails;
retval.scheduleName = scheduleName;
retval.scheduleProjectName = scheduleProjectName;

retval;
