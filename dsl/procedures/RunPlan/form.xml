<!--
    This form is generated automatically from the parameters pluginspec.
    Please not not edit this file manually as it will be regenerated.
-->
<editor>
  <help>/commander/pages/@PLUGIN_NAME@/help?s=Administration&amp;ss=Plugins#RunPlan</help>
  <formElement>
    <type>entry</type>
    <property>config</property>
    <configuration>1</configuration>
    <propertyReference>/plugins/@PLUGIN_NAME@/project/ec_plugin_cfgs</propertyReference>
    <required>1</required>
    <documentation>Previously defined configuration for the plugin</documentation>
    <label>Configuration Name:</label>
  </formElement>
  <formElement>
    <type>entry</type>
    <property>projectKey</property>
    <required>1</required>
    <documentation>Project key (short name) of project that contains build plan.</documentation>
    <label>Project Key:</label>
  </formElement>
  <formElement>
    <type>entry</type>
    <property>planKey</property>
    <required>1</required>
    <documentation>Short key of plan to run.</documentation>
    <label>Plan Key:</label>
  </formElement>
  <formElement>
    <type>entry</type>
    <property>customRevision</property>
    <required>0</required>
    <documentation>Run build against a custom branch (revision).</documentation>
    <label>Custom Revision:</label>
  </formElement>
  <formElement>
    <type>textarea</type>
    <property>additionalBuildVariables</property>
    <required>0</required>
    <htmlDocumentation>Additional variables for this Run specified as name-value pairs, with 1 pair per line. <br/>If not specified, the default variables for the definition will be used. <br/>Example: <br/>
  <b>system.debug=true</b> <br/>
  <b>BuildConfiguration=debug</b> <br/>
  <b>BuildPlatform=x64</b> <br/>
 Variables defined in Bamboo as global variables or plan variables MUST be prefixed with bamboo.variable ie. bamboo.variable.myVariable=valueForMyVariable
</htmlDocumentation>
    <documentation>Additional variables for this Run specified as name-value pairs, with 1 pair per line. &lt;br/&gt;If not specified, the default variables for the definition will be used. &lt;br/&gt;Example: &lt;br/&gt;
  &lt;b&gt;system.debug=true&lt;/b&gt; &lt;br/&gt;
  &lt;b&gt;BuildConfiguration=debug&lt;/b&gt; &lt;br/&gt;
  &lt;b&gt;BuildPlatform=x64&lt;/b&gt; &lt;br/&gt;
 Variables defined in Bamboo as global variables or plan variables MUST be prefixed with bamboo.variable ie. bamboo.variable.myVariable=valueForMyVariable
</documentation>
    <label>Additional Variables:</label>
    <collection>1</collection>
    <collectionEntrySeparator>;#;#;#</collectionEntrySeparator>
    <collectionName>Parameter name</collectionName>
    <collectionValue>Parameter value</collectionValue>
    <collectionValueSeparator>=</collectionValueSeparator>
  </formElement>
  <formElement>
    <type>checkbox</type>
    <property>waitForBuild</property>
    <required>1</required>
    <documentation>If checked, the procedure will wait until the build is finished or until the wait time exceeds the value specified in the Wait Timeout, whichever is earlier.</documentation>
    <label>Wait For Build:</label>
    <checkedValue>1</checkedValue>
    <initiallyChecked>true</initiallyChecked>
    <uncheckedValue>0</uncheckedValue>
  </formElement>
  <formElement>
    <type>entry</type>
    <property>waitTimeout</property>
    <required>0</required>
    <documentation>Timeout in seconds to wait for build to finish. Will be used if "Wait for build" is checked. Default waiting time is 300 secs.</documentation>
    <label>Wait Timeout:</label>
    <value>300</value>
    <condition>${waitForBuild} == '1'</condition>
    <dependsOn>waitForBuild</dependsOn>
  </formElement>
  <formElement>
    <type>select</type>
    <property>resultFormat</property>
    <required>0</required>
    <documentation>Format to save the results.</documentation>
    <label>Result Format:</label>
    <option>
      <name>JSON</name>
      <value>json</value>
    </option>
    <option>
      <name>Property Sheet</name>
      <value>propertySheet</value>
    </option>
    <option>
      <name>Do not save the result</name>
      <value>none</value>
    </option>
    <value>json</value>
  </formElement>
  <formElement>
    <type>entry</type>
    <property>resultPropertySheet</property>
    <required>0</required>
    <documentation>Property sheet to store the results.</documentation>
    <label>Result Property Sheet:</label>
    <value>/myJob/runResult</value>
    <condition>${resultFormat} != 'none'</condition>
    <dependsOn>resultFormat</dependsOn>
  </formElement>
</editor>